"""
# A useful Python module for obtaining: 
# Fibonacci Numbers, Lucas Numbers, Pell Numbers & Jacobsthall Numbers.


**Fibonacci Numbers**

The Fibonacci numbers are the numbers in the following integer sequence.
0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ……..

In mathematical terms, the sequence Fn of Fibonacci numbers is defined by the 
recurrence relation **Fn = Fn-1 + Fn-2** with seed values F0 = 0 and F1 = 1.


**Lucas Numbers**

Similar to the Fibonacci numbers, each Lucas number is defined to be the sum 
of its two immediate previous terms, thereby forming a Fibonacci integer 
sequence. The first two Lucas numbers are L0=2 and L1=1 as opposed to the 
first two Fibonacci numbers F0 = 0 and F1 = 1. Though closely related in 
definition, Lucas and Fibonacci numbers exhibit distinct properties.

The sequence of the first twelve Lucas numbers is: 
                                2, 1, 3 , 4, 7, 11, 18, 29, 47, 76, 123, 199


**Pell Numbers**

Pell numbers are numbers that are similar to the Fibonacci numbers and are 
generated by the below formula
 
Pn = 2*Pn-1 + Pn-2 
with seeds P0 = 0 and P1 = 1

First few Pell numbers are 0, 1, 2, 5, 12, 29, 70, 169, 408, 985, 2378, ...


**Jacobsthal Numbers**

The Jacobsthal sequence is an additive sequence similar to the Fibonacci 
sequence, defined by the recurrence relation Jn = Jn-1 + 2Jn-2, 
with initial terms J0 = 0 and J1 = 1.

The first few Jacobsthal numbers are: 
0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, 5461, 10923, ……

"""

import sys

def fibo_number(n: int) -> int:
    """Returns the n-th Fibonacci number.

    Arguments:

    n -- The index of the desired number in the Fibonacci sequence.

    Returns:

    The n-th Fibonacci number.
    """
    if not isinstance(n, int):
        raise TypeError('Parameter n must an integer')
    if n < 0:
        raise ValueError('Parameter n must be non-negative')

    if n == 0:
        return 0
    if n == 1:
        return 1
    return fibo_number(n - 1) + fibo_number(n - 2)



def lucas(n):

    """Returns lucas number.

    Arguments:

    n -- The index of the desired number in the lucas sequence.

    Returns:

    The n-th lucas number.
    """

    if not isinstance(n, int):
        raise TypeError('Parameter n must an integer')
    if n < 0:
        raise ValueError('Parameter n must be non-negative')


    if n==0:
        return 2
    if n==1:
        return 1
    return lucas(n-1) + lucas(n-2)



def pell(n):
    """Returns Pell number.

    Arguments:

    n -- The index of the desired number in the Pell sequence.

    Returns:

    The n-th Pell number.
    """

    if not isinstance(n, int):
            raise TypeError('Parameter n must an integer')
    if n < 0:
            raise ValueError('Parameter n must be non-negative')

    # Generates pell numbers without using recursion
    if (n <= 2):
        return n
  
    a = 1
    b = 2
    for i in range(3, n+1):
        c = 2 * b + a
        a = b
        b = c
     
    return b

def jacobsthal(n):

    """Returns Jacobsthall number.

    Arguments:

    n -- The index of the desired number in the Jacobsthall sequence.

    Returns:

    The n-th Jacobsthall number.
    """


    if not isinstance(n, int):
            raise TypeError('Parameter n must an integer')
    if n < 0:
            raise ValueError('Parameter n must be non-negative')

    
    if (n == 0):
        return 0
 
    
    if (n == 1):
        return 1
 
    # recursion applied
    return jacobsthal(n - 1) + 2 * jacobsthal(n - 2)




def run_from_cli():
    """Called from the command-line, 
       prints the user specified Fibonacci, lucas, pell or Jacobsthall numbers.

       **Example: pynum jt 11 **
       ** prints Jacobsthal sequence resulting 683 **

       **Example: pynum lucas 11 **
       ** prints lucas sequence resulting 199 **

    """
    n = int(sys.argv[2])
    if sys.argv[1] == "fibo":
        print(fibo_number(n))
    elif sys.argv[1] == "lucas":
        print(lucas(n))
    elif sys.argv[1] == "pell":
        print(pell(n))
    elif sys.argv[1] == "jt":
        print(jacobsthal(n))


